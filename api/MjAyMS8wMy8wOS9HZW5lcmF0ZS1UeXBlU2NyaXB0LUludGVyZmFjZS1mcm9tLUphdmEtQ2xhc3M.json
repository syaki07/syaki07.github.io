{"title":"Generate TypeScript Interface from Java Class","date":"2021-03-09T14:16:55.000Z","date_formatted":{"ll":"Mar 9, 2021","L":"03/09/2021","MM-DD":"03-09"},"link":"2021/03/09/Generate-TypeScript-Interface-from-Java-Class","tags":["Java","TypeScript"],"updated":"2021-03-10T14:44:02.498Z","content":"<p>最近在对 Web 项目做架构升级，计划使用 TypeScript 。</p>\n<p><strong>为了 NO AnyScript !!!</strong></p>\n<p>因此需要对已有的 Java Web 应用接口的 Model Class 生成对应的 TypeScript Interface 。</p>\n<p>为了不减少摸鱼时间，当然是写个脚本生成 🐶</p>\n<h1 id=\"具体思路\">具体思路<a title=\"#具体思路\" href=\"#具体思路\"></a></h1>\n<ol>\n<li>\n<p>维护一个 Java 类型映射到 TypeScript 类型的 Map</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, String&gt; javaToTypeScriptTypeMap = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;() &#123;&#123;</span><br><span class=\"line\">    put(<span class=\"string\">&quot;int&quot;</span>, <span class=\"string\">&quot;number&quot;</span>);</span><br><span class=\"line\">    put(<span class=\"string\">&quot;java.lang.Integer&quot;</span>, <span class=\"string\">&quot;number&quot;</span>);</span><br><span class=\"line\">    put(<span class=\"string\">&quot;java.util.List&quot;</span>, <span class=\"string\">&quot;Array&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>根据包名扫描获取所有的 Class</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Class&gt; <span class=\"title\">getClassListFromPackage</span><span class=\"params\">(String packageName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取路径</span></span><br><span class=\"line\">    String packageDirName = packageName.replace(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">    Thread.currentThread().getContextClassLoader().getResources(packageDirName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据路径扫描文件并获取 Class</span></span><br><span class=\"line\">    String className = file.getName();</span><br><span class=\"line\">    Thread.currentThread().getContextClassLoader().loadClass(packageName + <span class=\"string\">&quot;.&quot;</span> + className);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>遍历获取到的每个 Class 里的所有 Field 的类型和名称，并收集成一个 Map</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 第一层 Map key 为 className</span></span><br><span class=\"line\"><span class=\"comment\"> * 第二层 Map key 为 TypeScript type , value 为对应类型的字段名 list</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt; res = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// foreach classList</span></span><br><span class=\"line\">Field[] fields = clazz.getDeclaredFields();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// foreach fields</span></span><br><span class=\"line\">String fieldName = field.getName();</span><br><span class=\"line\">String fieldType = field.getType().getName();</span><br><span class=\"line\">String tsFieldType = javaToTypeScriptTypeMap.getOrDefault(fieldType, fieldType);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于 array 和 map 的范型参数需要特殊处理</span></span><br><span class=\"line\"><span class=\"comment\">// foreach ((ParameterizedType) field.getGenericType()).getActualTypeArguments()</span></span><br><span class=\"line\">t = t.replaceAll(<span class=\"string\">&quot;class &quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">t = t.replaceAll(packageName + <span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// foreach javaToTypeScriptTypeMap.entrySet()</span></span><br><span class=\"line\">String k = entry.getKey();</span><br><span class=\"line\">String v = entry.getValue();</span><br><span class=\"line\">t = t.replace(k, v);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>遍历收集的 Map 生成 ts 文件</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder typeFile = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">res.forEach((ck, cv) -&gt; &#123;</span><br><span class=\"line\">    typeFile.append(<span class=\"string\">&quot;export class &quot;</span>);</span><br><span class=\"line\">    typeFile.append(ck);</span><br><span class=\"line\">    typeFile.append(<span class=\"string\">&quot; &#123;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    cv.forEach((fk, fv) -&gt; fv.forEach(field -&gt; &#123;</span><br><span class=\"line\">        typeFile.append(<span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">        typeFile.append(field);</span><br><span class=\"line\">        typeFile.append(<span class=\"string\">&quot;!: &quot;</span>);</span><br><span class=\"line\">        typeFile.append(fk);</span><br><span class=\"line\">        typeFile.append(<span class=\"string\">&quot;;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">    typeFile.append(<span class=\"string\">&quot;&#125;\\n\\n&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    BufferedWriter out = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> FileWriter(packageName + <span class=\"string\">&quot;.ts&quot;</span>));</span><br><span class=\"line\">    out.write(typeFile.toString());</span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>最后得到一个以 packageName 为名称的 TypeScript 文件。</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    name!: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age!: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    friendList!: <span class=\"built_in\">Array</span>&lt;Person&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"缺陷\">缺陷<a title=\"#缺陷\" href=\"#缺陷\"></a></h1>\n<p>目前的实现方案有个缺陷，无法处理 class 的范型参数，类似于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;T&gt; data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只会生成</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Page &#123;</span><br><span class=\"line\">    index!: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    size!: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    data!: <span class=\"built_in\">Array</span>&lt;T&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Update: 2020/03/10</p>\n<p>可以通过 toGenericString 方法获取包含范型参数的类名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clazz.toGenericString()</span><br><span class=\"line\"><span class=\"comment\">// sample: public class com.demo.model.page&lt;T&gt; &#123;&#125;</span></span><br></pre></td></tr></table></figure>","next":{"title":"Types and Methods of Interviews","link":"2021/03/02/Types-and-Methods-of-Interviews"},"plink":"https://syaki.github.io/2021/03/09/Generate-TypeScript-Interface-from-Java-Class/","toc":[{"id":"具体思路","title":"具体思路","index":"1"},{"id":"缺陷","title":"缺陷","index":"2"}],"copyright":{"author":"Syaki","link":"<a href=\"https://syaki.github.io/2021/03/09/Generate-TypeScript-Interface-from-Java-Class/\" title=\"Generate TypeScript Interface from Java Class\">https://syaki.github.io/2021/03/09/Generate-TypeScript-Interface-from-Java-Class/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)"}}