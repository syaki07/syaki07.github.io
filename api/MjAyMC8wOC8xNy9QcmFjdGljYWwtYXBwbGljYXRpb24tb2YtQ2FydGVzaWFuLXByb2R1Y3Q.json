{"title":"Practical application of Cartesian product","date":"2020-08-17T06:31:06.000Z","date_formatted":{"ll":"Aug 17, 2020","L":"08/17/2020","MM-DD":"08-17"},"link":"2020/08/17/Practical-application-of-Cartesian-product","tags":["Java","JavaScript"],"updated":"2021-02-19T13:58:52.295Z","content":"<h1 id=\"javascript-使用-array.flagmap()-方法实现笛卡尔乘积\"><code>JavaScript</code> 使用 <code>Array.flagMap()</code> 方法实现笛卡尔乘积<a title=\"#javascript-使用-array.flagmap()-方法实现笛卡尔乘积\" href=\"#javascript-使用-array.flagmap()-方法实现笛卡尔乘积\"></a></h1>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = [<span class=\"string\">&#x27;a1&#x27;</span>, <span class=\"string\">&#x27;a2&#x27;</span>, <span class=\"string\">&#x27;a3&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = [<span class=\"string\">&#x27;b1&#x27;</span>, <span class=\"string\">&#x27;b2&#x27;</span>, <span class=\"string\">&#x27;b3&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.flatMap(<span class=\"function\">(<span class=\"params\">x1</span>) =&gt;</span> b.map(<span class=\"function\">(<span class=\"params\">x2</span>) =&gt;</span> x1 + x2)));</span><br><span class=\"line\"><span class=\"comment\">// Array(9) [ &quot;a1b1&quot;, &quot;a1b2&quot;, &quot;a1b3&quot;, &quot;a2b1&quot;, &quot;a2b2&quot;, &quot;a2b3&quot;, &quot;a3b1&quot;, &quot;a3b2&quot;, &quot;a3b3&quot; ]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"java-利用笛卡尔乘积实现中文姓名拼音校验\"><code>Java</code> 利用笛卡尔乘积实现中文姓名拼音校验<a title=\"#java-利用笛卡尔乘积实现中文姓名拼音校验\" href=\"#java-利用笛卡尔乘积实现中文姓名拼音校验\"></a></h1>\n<p>由于中文存在多音字的情况，对于每个字可能的拼音求笛卡尔积。</p>\n<h2 id=\"接口定义\">接口定义<a title=\"#接口定义\" href=\"#接口定义\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IChineseNamePinyin</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">verifyChineseNamePinyin</span><span class=\"params\">(String name, String pinyin)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体实现\">具体实现<a title=\"#具体实现\" href=\"#具体实现\"></a></h2>\n<p>利用 <code>Java 8 Stream flatMap()</code> 方法对姓名中每个字可能的拼音求笛卡尔积。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ChineseNamePinyinImpl implements IChineseNamePinyin &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 中文姓名拼音校验</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name   姓名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pinyin 拼音</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 中文姓名拼音校验结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">verifyChineseNamePinyin</span><span class=\"params\">(String name, String pinyin)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNullOrEmpty(name) || StringUtils.isNullOrEmpty(pinyin)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 初始化 pinyin4j format</span></span><br><span class=\"line\">        HanyuPinyinOutputFormat format = <span class=\"keyword\">new</span> HanyuPinyinOutputFormat();</span><br><span class=\"line\">        format.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class=\"line\">        format.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class=\"line\">        format.setVCharType(HanyuPinyinVCharType.WITH_V);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将姓名转为 char array</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] nameChars = name.trim().toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;List&lt;String&gt;&gt; nameCharPinyinList = Lists.newLinkedList();</span><br><span class=\"line\">        List&lt;String&gt; namePinyinList = Lists.newLinkedList();</span><br><span class=\"line\">        namePinyinList.add(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> nameChar : nameChars) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 过滤非中文字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!Character.toString(nameChar).matches(<span class=\"string\">&quot;[\\\\u4E00-\\\\u9FA5]+&quot;</span>)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 统计多音字所有的拼音</span></span><br><span class=\"line\">                nameCharPinyinList.add(<span class=\"keyword\">this</span>.nameCharToHanyuPinyinStringList(nameChar, format));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将所有拼音的组合收集成一个 list</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (List&lt;String&gt; strings : nameCharPinyinList) &#123;</span><br><span class=\"line\">            namePinyinList = namePinyinList.stream()</span><br><span class=\"line\">                    .flatMap(r -&gt; strings.stream()</span><br><span class=\"line\">                            .map(c -&gt; r + c))</span><br><span class=\"line\">                    .collect(Collectors.toList());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断拼音是否匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> namePinyinList.contains(pinyin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用 PinyinHelper 获取拼音</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> List&lt;String&gt; <span class=\"title\">nameCharToHanyuPinyinStringList</span><span class=\"params\">(<span class=\"keyword\">char</span> nameChar, HanyuPinyinOutputFormat format)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.asList(PinyinHelper.toHanyuPinyinStringArray(nameChar, format));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"GitLab CD/CD 实践","link":"2020/10/21/GitLab-CD-CD-实践"},"next":{"title":"Remote debug with Java Instrumentation","link":"2020/05/19/Remote-debug-with-Java-Instrumentation"},"plink":"https://syaki.github.io/2020/08/17/Practical-application-of-Cartesian-product/","toc":[{"id":"javascript-使用-array.flagmap()-方法实现笛卡尔乘积","title":"JavaScript 使用 Array.flagMap() 方法实现笛卡尔乘积","index":"1"},{"id":"java-利用笛卡尔乘积实现中文姓名拼音校验","title":"Java 利用笛卡尔乘积实现中文姓名拼音校验","index":"2","children":[{"id":"接口定义","title":"接口定义","index":"2.1"},{"id":"具体实现","title":"具体实现","index":"2.2"}]}],"copyright":{"author":"Syaki","link":"<a href=\"https://syaki.github.io/2020/08/17/Practical-application-of-Cartesian-product/\" title=\"Practical application of Cartesian product\">https://syaki.github.io/2020/08/17/Practical-application-of-Cartesian-product/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)"}}