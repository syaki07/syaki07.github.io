{"title":"利用 AbstractProcessor 增加摸鱼时间","date":"2020-02-01T11:44:52.000Z","date_formatted":{"ll":"Feb 1, 2020","L":"02/01/2020","MM-DD":"02-01"},"link":"2020/02/01/利用-AbstractProcessor-增加摸鱼时间","tags":["Java"],"updated":"2021-03-01T13:33:12.203Z","content":"<p>绝不手写能通过代码生成的代码！！！</p>\n<h1 id=\"背景\">背景<a title=\"#背景\" href=\"#背景\"></a></h1>\n<p>内部 SOA 框架要求所有应用对外暴露的接口要定义一份 interface ，并且实现它。</p>\n<p>如下，每新增一个 HTTP 接口都需要在 TestSOAService 中添加函数定义，并在 TestSOAServiceImpl 实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestSOAService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">HelloWorldResponseType <span class=\"title\">helloWorld</span><span class=\"params\">(HelloWorldRequestType request)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSOAServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">TestSOAService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServiceInvoker serviceInvoker;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloWorldResponseType <span class=\"title\">helloWorld</span><span class=\"params\">(HelloWorldRequestType request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> serviceInvoker.invoke(HelloWorldService.class, request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"解决办法\">解决办法<a title=\"#解决办法\" href=\"#解决办法\"></a></h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultServiceInvokerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServiceInvoker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DefaultServiceInvokerImpl</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123; <span class=\"keyword\">this</span>.context = context; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;Q, S, T&gt; <span class=\"function\">S <span class=\"title\">invoke</span><span class=\"params\">(Class&lt;T&gt; cls, Q req)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> context.getBean(cls).service(req);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于每个接口都是统一调用自定义实现的 ServiceInvoker.invoke 方法，所以每个接口的定义和实现只有名称不同。</p>\n<p>因此考虑通过定义一个 AbstractProcessor 的子类来生成接口定义和实现文件代码。</p>\n<h2 id=\"自定义-annotation\">自定义 Annotation<a title=\"#自定义-annotation\" href=\"#自定义-annotation\"></a></h2>\n<p>自定义一个 Annotation ，添加到每个接口 Service 类上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> WebService &#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;TestSOAService&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebService</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloWorldResponseType <span class=\"title\">service</span><span class=\"params\">(HelloWorldRequestType request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HelloWorldResponseType response = <span class=\"keyword\">new</span> HelloWorldResponseType();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义一个-abstractprocessor-的子类\">定义一个 AbstractProcessor 的子类<a title=\"#定义一个-abstractprocessor-的子类\" href=\"#定义一个-abstractprocessor-的子类\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebServiceGenerateProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Pair&lt;TypeSpec.Builder, TypeSpec.Builder&gt;&gt; files = Maps.newLinkedHashMap();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> JavacElements elementUtils;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> JavacTypes typeUtils;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Messager messager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getSupportedAnnotationTypes</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> Collections.singleton(WebService.class.getName()); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SourceVersion <span class=\"title\">getSupportedSourceVersion</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> SourceVersion.RELEASE_8; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.init(processingEnv);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementUtils = (JavacElements) processingEnv.getElementUtils();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.typeUtils = (JavacTypes) processingEnv.getTypeUtils();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.messager = processingEnv.getMessager();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.messager.printMessage(Diagnostic.Kind.NOTE, <span class=\"string\">&quot;Generate WebServices...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (roundEnv.processingOver()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 写文件</span></span><br><span class=\"line\"><span class=\"comment\">             * JavaFile.builder</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 生成文件内容</span></span><br><span class=\"line\"><span class=\"comment\">             * 通过 roundEnv.getElementsAnnotatedWith 获取 service class</span></span><br><span class=\"line\"><span class=\"comment\">             * 通过 TypeSpec.interfaceBuilder TypeSpec.classBuilder</span></span><br><span class=\"line\"><span class=\"comment\">             * MethodSpec.methodBuilder CodeBlock.builder AnnotationSpec.builder</span></span><br><span class=\"line\"><span class=\"comment\">             * 等方法生成文件内容</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"效果\">效果<a title=\"#效果\" href=\"#效果\"></a></h1>\n<p>编译器会在编译期找到所有添加了 WebService 注解的类，并根据我们定义的 WebServiceGenerateProcessor.process 逻辑生成 TestSOAService 和 TestSOAServiceImpl 文件。</p>\n<p>这样每天又可以多出 5 分钟的摸鱼时间 🐶 。</p>\n","prev":{"title":"一些有趣的 Codewars JavaScript 题解","link":"2020/03/28/一些有趣的-Codewars-JavaScript-题解"},"next":{"title":"How to debug rust","link":"2019/11/04/How-to-debug-rust"},"plink":"https://syaki.github.io/2020/02/01/利用-AbstractProcessor-增加摸鱼时间/","toc":[{"id":"背景","title":"背景","index":"1"},{"id":"解决办法","title":"解决办法","index":"2","children":[{"id":"自定义-annotation","title":"自定义 Annotation","index":"2.1"},{"id":"定义一个-abstractprocessor-的子类","title":"定义一个 AbstractProcessor 的子类","index":"2.2"}]},{"id":"效果","title":"效果","index":"3"}],"copyright":{"author":"Syaki","link":"<a href=\"https://syaki.github.io/2020/02/01/利用-AbstractProcessor-增加摸鱼时间/\" title=\"利用 AbstractProcessor 增加摸鱼时间\">https://syaki.github.io/2020/02/01/利用-AbstractProcessor-增加摸鱼时间/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)"}}